// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Services/share_food.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct Eater_ShareFoodRequest: Sendable {
    var time: Int64 = 0
    var fromEmail: String = .init()
    var toEmail: String = .init()
    var percentage: Int32 = 0
    var unknownFields = SwiftProtobuf.UnknownStorage()
    init() {}
}

struct Eater_ShareFoodResponse: Sendable {
    var success: Bool = false
    var unknownFields = SwiftProtobuf.UnknownStorage()
    init() {}
}

private let _protobuf_package = "Eater"

extension Eater_ShareFoodRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ShareFoodRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "time"),
        2: .same(proto: "from_email"),
        3: .same(proto: "to_email"),
        4: .same(proto: "percentage"),
    ]
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &time)
            case 2: try decoder.decodeSingularStringField(value: &fromEmail)
            case 3: try decoder.decodeSingularStringField(value: &toEmail)
            case 4: try decoder.decodeSingularInt32Field(value: &percentage)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if time != 0 { try visitor.visitSingularInt64Field(value: time, fieldNumber: 1) }
        if !fromEmail.isEmpty { try visitor.visitSingularStringField(value: fromEmail, fieldNumber: 2) }
        if !toEmail.isEmpty { try visitor.visitSingularStringField(value: toEmail, fieldNumber: 3) }
        if percentage != 0 { try visitor.visitSingularInt32Field(value: percentage, fieldNumber: 4) }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Eater_ShareFoodRequest, rhs: Eater_ShareFoodRequest) -> Bool {
        if lhs.time != rhs.time { return false }
        if lhs.fromEmail != rhs.fromEmail { return false }
        if lhs.toEmail != rhs.toEmail { return false }
        if lhs.percentage != rhs.percentage { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Eater_ShareFoodResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ShareFoodResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "success"),
    ]
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularBoolField(value: &success)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if success != false { try visitor.visitSingularBoolField(value: success, fieldNumber: 1) }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Eater_ShareFoodResponse, rhs: Eater_ShareFoodResponse) -> Bool {
        if lhs.success != rhs.success { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
